#!/bin/bash

notify-send -h string:wf-recorder:record -t 1000 "Recording in:" "<span color='#EA6962' font='20px'><b>3</b></span>"
sleep 1
notify-send -h string:wf-recorder:record -t 1000 "Recording in:" "<span color='#EA6962' font='20px'><b>2</b></span>"
sleep 1
notify-send -h string:wf-recorder:record -t 950 "Recording in:" "<span color='#EA6962' font='20px'><b>1</b></span>"
sleep 1

output_path="invalid"
clean_audio_file=/tmp/audio.wav
noisy_audio_file=/tmp/temp.wav
temporary_video_file=/tmp/temp_video.mkv

wf_recorder_process_id=0
ffplay_process_id=0
ffmpeg_audio_process_id=0

arnndn_models_directory="$HOME/.local/share/arnndn-models"

LOG_FILE="$HOME/.hyprcast.log"

# Parse arguments to find output path
for argument in "$@"; do
  if [[ $argument != --* ]]; then
    output_path=$argument
    if [[ ! -e $output_path ]]; then
      echo "Path does not exist"
      exit 1
    fi
    break
  fi
done

if [[ $output_path == invalid ]]; then
  echo "Need path!"
  exit 1
fi

# Video
wf-recorder -f $temporary_video_file >/dev/null 2>$LOG_FILE &
wf_recorder_process_id=$!

# Capture audio if specified
for argument in "$@"; do
  if [[ $argument == --audio ]]; then
    ffmpeg \
      -f pulse \
      -i "default" \
      -filter_complex "asplit[a1] [a2]; [a1] arnndn=m=${arnndn_models_directory}/bd.rnnn [o1];[a2] arnndn=m=${arnndn_models_directory}/lq.rnnn [o2]" \
      -map '[o1]' -codec:a pcm_s24le "$clean_audio_file" \
      -map '[o2]' -codec:a pcm_s24le "$noisy_audio_file" \
      >/dev/null 2>"$LOG_FILE" &
    disown
    ffmpeg_audio_process_id=$!
  elif [[ $argument == --webcam ]]; then
    ffplay -f v4l2 -i /dev/video0 -x 232 -y 175 >/dev/null 2>"$LOG_FILE" &
    disown
    ffplay_process_id=$!
  fi
done

# Function to safely kill processes
safe_terminate_process() {
  if [[ $1 -gt 0 ]] 2>/dev/null; then
    kill -15 "$1" 2>/dev/null || :
  fi
}

# Command menu loop
while true; do
  read -r -p "(hyprcast ó°¹‘ ) " user_input
  case $user_input in
  stop | s)
    echo "Quitting..."
    safe_terminate_process $wf_recorder_process_id
    safe_terminate_process $ffplay_process_id
    safe_terminate_process $ffmpeg_audio_process_id

    if [[ $ffmpeg_audio_process_id -ne 0 ]]; then
      # Merge the audio with the video
      ffmpeg -i $clean_audio_file -i $temporary_video_file "$output_path/$(date +%Y-%m-%d_%H-%M-%S).mkv"
      # ffmpeg -i $temporary_video_file -itsoffset 0.5 -i $clean_audio_file -c:v copy -c:a aac "$output_path/$(date +%Y-%m-%d_%H-%M-%S).mkv"

      # Clean temp audio files
      rm $clean_audio_file $noisy_audio_file
    else
      ffmpeg -i $temporary_video_file -c:v copy -c:a copy "$output_path/$(date +%Y-%m-%d_%H-%M-%S).mkv"
    fi

    # Clean temp video file
    rm "$temporary_video_file"
    break
    ;;
  paus | p)
    echo -e "\nPause"
    ;;
  help | h)
    echo -e "\nAvailable commands are:\n" \
      "\033[33mstop\033[0m: stop recording\n" \
      "\033[33mhelp\033[0m: print menu help"
    ;;
  *)
    echo -e "\nInvalid command."
    ;;
  esac
done

# Check if there is anything in the log file (indicating an error)
if [ -s "$LOG_FILE" ]; then
  echo "Errors were logged. Please check $LOG_FILE."
  exit 1
fi
